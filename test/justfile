# Commands for testing the published container
set shell        := ["bash", "-c"]
set dotenv-load  := true
# Tests must not use the development docker-compose.override.yml
DOCKER_COMPOSE   := "docker-compose -f docker-compose.yml"
BACKUP_FILE_NAME := `echo "$(date "+%Y-%m-%dT%H:%M:%SZ")-backup.sql.gz"`
BUCKET_NAME      := "test-bucket"

@_help:
    printf "\n"
    just --list --unsorted --list-heading $'âš¡ Repository commands for running tests:\n'
    printf "\n"

# Run tests (inside the core container)
@test: _ensure_support_containers _ensure_bucket _test

@_test: db_setup _create_backup db_drop _restore_backup
    # db_verify cannot be added to the end of the command
    # dependencies, it does not get called, it might be a bug with just
    just db_verify
    echo -e "ğŸŒŸğŸŒŸğŸŒŸğŸŒŸğŸŒŸğŸŒŸğŸŒŸğŸŒŸğŸŒŸğŸŒŸğŸŒŸğŸŒŸğŸŒŸğŸŒŸ"
    echo -e "       Tests pass      "
    echo -e "ğŸŒŸğŸŒŸğŸŒŸğŸŒŸğŸŒŸğŸŒŸğŸŒŸğŸŒŸğŸŒŸğŸŒŸğŸŒŸğŸŒŸğŸŒŸğŸŒŸ"

# Create the database and insert test data
@db_setup: (_run_sql "table-create.sql") (_run_sql "data-insert.sql") db_verify

# Validate that the database is there with expected data
db_verify:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "Verifying database contents"
    RESULT="$(docker exec $(just _postgres_container_id) psql -U postgres -d postgres -c 'select * from test_table')"
    if echo $RESULT | grep -q "d59a8f68-a6f3-11ec-93dd-3f6db85b1e3d | some-name"; then
        echo "âœ… Test data verified in the database"
    else
        echo "ğŸ’¥ Data verification failed: query does not contain: 'd59a8f68-a6f3-11ec-93dd-3f6db85b1e3d | some-name'"
        exit 1
    fi

# Drop the test_table and confirm that it is gone
db_drop:  (_run_sql "table-drop.sql")
    #!/usr/bin/env bash
    set -euo pipefail
    if docker exec $(just _postgres_container_id) psql -U postgres -d postgres -c "SELECT EXISTS (SELECT FROM pg_tables WHERE schemaname = 'public' AND tablename = 'test_table');" | grep -q ' f'; then
        echo "âœ… Confirm table dropped"
    else
        echo "ğŸ’¥ Failed to drop table"
        exit 1
    fi

@_ensure_support_containers:
    cd .. && {{DOCKER_COMPOSE}} up -d postgres localstack

_create_backup:
    cd .. && {{DOCKER_COMPOSE}} run db-remote-clone backup {{BACKUP_FILE_NAME}}

_restore_backup:
    cd .. && {{DOCKER_COMPOSE}} run db-remote-clone restore {{BACKUP_FILE_NAME}}

_run_sql file: _ensure_postgres_running
    #!/usr/bin/env bash
    set -euo pipefail
    docker exec -i $(just _postgres_container_id) psql -U postgres -d postgres < sql/{{file}}

@_ensure_postgres_running:
    cd .. && if ! docker-compose ps --services --status running | grep -q postgres; then echo -e "ğŸ’¥ ğŸ‘‰ It looks like the docker-compose postgres service is not running: try 'just _ensure_support_containers'"; fi

@_ensure_bucket: _ensure_support_containers
    cd .. && {{DOCKER_COMPOSE}} exec -T localstack awslocal s3 mb s3://{{BUCKET_NAME}} --region us-east-1

@_postgres_container_id:
    # We cannot use docker-compose exec becuase we need the docker exec "-i" flag but not the "-t" flag and compose only does both
    # So get the postgres container ID to 'docker exec ...' instead of 'docker-compose exec ...'
    cd .. && echo $(docker-compose ps --format json | jq -r '.[] | select(.Service == "postgres") | .ID')
